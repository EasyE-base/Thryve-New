rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ---------- Helpers ----------
    function isAuthed() { return request.auth != null; }
    function uid() { return request.auth.uid; }
    function isOwner(userId) { return isAuthed() && uid() == userId; }

    // Resolve a studio's ownerId
    function studioOwnerUid(studioId) {
      return get(/databases/$(database)/documents/studios/$(studioId)).data.ownerId;
    }
    function isStudioOwner(studioId) {
      return isAuthed() && studioOwnerUid(studioId) == uid();
    }

    // ---------- Users ----------
    match /users/{userId} {
      allow read, write: if isOwner(userId);
    }

    // ---------- Studios ----------
    match /studios/{studioId} {
      // Owner can always read; others only if active
      allow read: if isAuthed() && (resource.data.ownerId == uid() || resource.data.isActive == true);
      // Create: caller must set themselves as owner
      allow create: if isAuthed() && request.resource.data.ownerId == uid();
      // Update/Delete: owner only; ownerId immutable
      allow update, delete: if isAuthed() &&
        resource.data.ownerId == uid() &&
        request.resource.data.ownerId == resource.data.ownerId;
    }

    // ---------- Classes ----------
    match /classes/{classId} {
      function classStudioOwnerId(data) { return studioOwnerUid(data.studioId); }

      allow read: if isAuthed();

      // Create: only studio owner of referenced studio
      allow create: if isAuthed() && classStudioOwnerId(request.resource.data) == uid();

      // Update:
      // - Studio owner: full update (studioId immutable)
      // - Assigned instructor: only startTime, endTime, notes; ids immutable
      allow update: if isAuthed() && (
        (
          classStudioOwnerId(resource.data) == uid() &&
          request.resource.data.studioId == resource.data.studioId
        ) || (
          resource.data.instructorId == uid() &&
          request.resource.data.studioId == resource.data.studioId &&
          request.resource.data.instructorId == resource.data.instructorId &&
          request.resource.data.diff(resource.data).changedKeys().hasOnly(['startTime','endTime','notes'])
        )
      );

      // Delete: only studio owner
      allow delete: if isAuthed() && classStudioOwnerId(resource.data) == uid();
    }

    // ---------- Bookings ----------
    match /bookings/{bookingId} {
      // Read: booking user, assigned instructor, or the studio owner
      allow read: if isAuthed() && (
        resource.data.userId == uid() ||
        resource.data.instructorId == uid() ||
        (resource.data.studioId != null && isStudioOwner(resource.data.studioId))
      );

      // Create: user books for self
      allow create: if isAuthed() && request.resource.data.userId == uid();

      // Update (e.g., cancel): user can update own booking; userId immutable
      allow update: if isAuthed() &&
        resource.data.userId == uid() &&
        request.resource.data.userId == resource.data.userId;

      // Hard deletes disabled — use CF to set status=cancelled & adjust counts
      allow delete: if false;
    }

    // ---------- Instructors (marketplace profiles) ----------
    match /instructors/{instructorId} {
      allow read: if isAuthed();
      allow write: if uid() == instructorId;

      // Weekly availability subcollection
      match /availability/{docId} {
        allow read: if isAuthed();
        allow write: if isAuthed() && uid() == instructorId;
      }

      // (Optional) Reviews under instructor — immutable; studio owner only
      match /reviews/{reviewId} {
        allow read: if isAuthed();
        allow create: if isAuthed() && isStudioOwner(request.resource.data.studioId);
        allow update, delete: if false;
      }
    }

    // ---------- Studio booking requests (no reliance on studios.admins) ----------
    match /studios/{studioId}/bookingRequests/{requestId} {
      // Read by the targeted instructor OR the studio owner
      allow read: if isAuthed() && (
        resource.data.instructorId == uid() || isStudioOwner(studioId)
      );
      // Create/update by studio owner; instructor may accept/decline (status only)
      allow create: if isAuthed() && isStudioOwner(studioId);
      allow update: if isAuthed() && (
        isStudioOwner(studioId) ||
        (resource.data.instructorId == uid() &&
          request.resource.data.diff(resource.data).changedKeys().hasOnly(['status','updatedAt']))
      );
    }

    // ---------- Instructor's view of booking requests (mirror) ----------
    match /users/{userId}/bookingRequests/{requestId} {
      allow read: if uid() == userId;
      allow write: if false;  // Cloud Functions only
    }

    // ---------- Global Reviews (immutable) ----------
    match /reviews/{reviewId} {
      allow read: if isAuthed();
      allow create: if isAuthed() && request.resource.data.userId == uid();
      allow update, delete: if isAuthed() && resource.data.userId == uid();
    }

    // ---------- Payments (client read only; CF writes) ----------
    match /payments/{paymentId} {
      allow read: if isAuthed() && (
        (resource.data.userId != null && resource.data.userId == uid()) ||
        (resource.data.instructorId != null && resource.data.instructorId == uid()) ||
        (resource.data.studioId != null && isStudioOwner(resource.data.studioId))
      );
      allow create, update, delete: if false;
    }

    // ---------- Instructor verification (doc under instructor) ----------
    match /instructors/{instructorId}/verification {
      // Owner full access; admins read
      allow read, write: if uid() == instructorId;
      allow read: if isAuthed() && request.auth.token.admin == true;
    }

    // ---------- Marketplace stats / Analytics ----------
    match /marketplace/stats { allow read: if isAuthed(); allow write: if false; }
    match /analytics/{document=**} { allow read: if isAuthed(); allow write: if false; }

    // ---------- Messages ----------
    match /messages/{messageId} {
      // Create must use request.resource
      allow create: if isAuthed() && (uid() in request.resource.data.participants);
      // Read/update/delete permitted to participants only; participants cannot change on update
      allow read: if isAuthed() && (uid() in resource.data.participants);
      allow update: if isAuthed() && (uid() in resource.data.participants) &&
        request.resource.data.participants == resource.data.participants;
      allow delete: if isAuthed() && (uid() in resource.data.participants);
    }

    // ---------- Studio staff management ----------
    match /studio_staff/{staffId} {
      allow read: if isAuthed() &&
        (uid() == resource.data.studioId || uid() == resource.data.userId);
      allow write: if isAuthed() && uid() == resource.data.studioId;
    }

    // ---------- Payouts ----------
    match /instructor_payouts/{payoutId} {
      allow read: if isAuthed() &&
        (uid() == resource.data.instructorId || isStudioOwner(resource.data.studioId));
      allow write: if isAuthed() && isStudioOwner(resource.data.studioId);
    }
    match /instructor_payout_transactions/{transactionId} {
      allow read: if isAuthed() &&
        (uid() == resource.data.instructorId || isStudioOwner(resource.data.studioId));
      allow write: if false;
    }

    // ---------- Studio ↔ Instructor links (owner-aware) ----------
    match /studio_instructor_links/{linkId} {
      // Read: studio owner (their links) or instructor (their invites)
      allow read: if isAuthed() && (
        uid() == resource.data.instructorId || isStudioOwner(resource.data.studioId)
      );

      // Create: studio owner creates for their own studio
      allow create: if isAuthed() && isStudioOwner(request.resource.data.studioId);

      // Update: studio can manage; instructor can only change status and updatedAt
      allow update: if isAuthed() && (
        isStudioOwner(resource.data.studioId) ||
        (uid() == resource.data.instructorId &&
         request.resource.data.diff(resource.data).changedKeys().hasOnly(['status','updatedAt']))
      );

      // Delete: studio owner only
      allow delete: if isAuthed() && isStudioOwner(resource.data.studioId);
    }

    // ---------- Class schedules (aux/legacy) ----------
    match /class_schedules/{scheduleId} {
      allow read: if isAuthed();
      allow write: if isAuthed() &&
        (uid() == resource.data.instructorId || uid() == resource.data.studioId);
    }

    // ---------- Default deny ----------
    match /{document=**} { allow read, write: if false; }
  }
}


